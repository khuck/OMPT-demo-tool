cmake_minimum_required(VERSION 3.20)

project(ompt_tt VERSION 1.0 DESCRIPTION "OMPT Test Tool" LANGUAGES CXX C)

set(CMAKE_CXX_STANDARD_COMPUTED_DEFAULT 14)
set(CMAKE_CXX_EXTENSIONS_COMPUTED_DEFAULT OFF)
set(CMAKE_CXX_STANDARD 14)
set(CMAKE_CXX_STANDARD_REQUIRED ON)
set(CMAKE_CXX_EXTENSIONS OFF)

find_package(OpenMP REQUIRED)

message(INFO "${CMAKE_CXX_COMPILER_ID}")

add_library(ompt_tt SHARED src/callbacks.cpp)
#if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "NVHPC")
#    target_compile_options(ompt_tt PRIVATE "-mp=ompt,gpu")
#    target_link_options(ompt_tt PRIVATE "-mp=ompt,gpu")
#elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
#    target_compile_options(ompt_tt PRIVATE -fopenmp -target x86_64-pc-linux-gnu -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a)
#    target_link_options(ompt_tt PRIVATE -fopenmp -target x86_64-pc-linux-gnu -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a)
#    target_link_libraries(ompt_tt PUBLIC OpenMP::OpenMP_CXX)
#elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Intel")
#    target_compile_options(ompt_tt PRIVATE -qnextgen -qopenmp -fopenmp-targets=spir64)
#    target_link_options(ompt_tt PRIVATE -qnextgen -qopenmp -fopenmp-targets=spir64)
#else()
#    target_link_libraries(ompt_tt PUBLIC OpenMP::OpenMP_CXX)
#endif()
set_property(TARGET ompt_tt PROPERTY CXX_STANDARD 14)

enable_testing()

FILE(GLOB simple_sources src/simple/*.*)
add_executable(simple ${simple_sources})

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "NVHPC")
    # Use the tool-enabled OpenMP runtime
    target_compile_options(simple PRIVATE "-mp=ompt,gpu")
    target_link_options(simple PRIVATE "-mp=ompt,gpu")
    target_link_libraries(simple PUBLIC ompt_tt)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    target_compile_options(simple PRIVATE -fopenmp -target x86_64-pc-linux-gnu -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a)
    target_link_options(simple PRIVATE -fopenmp -target x86_64-pc-linux-gnu -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a)
    target_link_libraries(simple PUBLIC ompt_tt OpenMP::OpenMP_CXX)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "IntelLLVM")
    target_compile_options(simple PRIVATE -qnextgen -qopenmp -fopenmp-targets=spir64)
    target_link_options(simple PRIVATE -qnextgen -qopenmp -fopenmp-targets=spir64)
else()
    target_link_libraries(simple PUBLIC ompt_tt OpenMP::OpenMP_CXX)
endif()
add_test ("test_simple" simple)
set_tests_properties("test_simple" PROPERTIES FAIL_REGULAR_EXPRESSION "[^a-z]Error;ERROR;Failed;Mismatched")

FILE(GLOB mandel_sources src/mandel/*.*)
add_executable(mandel ${mandel_sources})

if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "NVHPC")
    # Use the tool-enabled OpenMP runtime
    target_compile_options(mandel PRIVATE "-mp=ompt,gpu")
    target_link_options(mandel PRIVATE "-mp=ompt,gpu")
    target_link_libraries(mandel PUBLIC ompt_tt)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
    target_compile_options(mandel PRIVATE -fopenmp -target x86_64-pc-linux-gnu -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a)
    target_link_options(mandel PRIVATE -fopenmp -target x86_64-pc-linux-gnu -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a)
    target_link_libraries(mandel PUBLIC ompt_tt OpenMP::OpenMP_CXX)
elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "IntelLLVM")
    target_compile_options(mandel PRIVATE -qnextgen -qopenmp -fopenmp-targets=spir64)
    target_link_options(mandel PRIVATE -qnextgen -qopenmp -fopenmp-targets=spir64)
else()
    target_link_libraries(mandel PUBLIC ompt_tt OpenMP::OpenMP_CXX)
endif()
add_test ("test_mandel" mandel)
set_tests_properties("test_mandel" PROPERTIES FAIL_REGULAR_EXPRESSION "[^a-z]Error;ERROR;Failed;Mismatched")

set(target_programs ompt_target ompt_target_matmult ompt_target_daxpy ompt_target_vector_add)

foreach(example_program ${target_programs})
    add_executable(${example_program} src/target/${example_program}.c)
    if ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "NVHPC")
        # Use the tool-enabled OpenMP runtime
        target_compile_options(${example_program} PRIVATE "-mp=ompt,gpu")
        target_link_options(${example_program} PRIVATE "-mp=ompt,gpu")
        target_link_libraries(${example_program} PUBLIC ompt_tt)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "Clang")
        target_compile_options(${example_program} PRIVATE -fopenmp -target x86_64-pc-linux-gnu -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a)
        target_link_options(${example_program} PRIVATE -fopenmp -target x86_64-pc-linux-gnu -fopenmp-targets=amdgcn-amd-amdhsa -Xopenmp-target=amdgcn-amd-amdhsa -march=gfx90a)
        target_link_libraries(${example_program} PUBLIC ompt_tt OpenMP::OpenMP_CXX)
    elseif ("${CMAKE_CXX_COMPILER_ID}" STREQUAL "IntelLLVM")
        target_compile_options(${example_program} PRIVATE -qnextgen -qopenmp -fopenmp-targets=spir64)
        target_link_options(${example_program} PRIVATE -qnextgen -qopenmp -fopenmp-targets=spir64)
    else()
        target_link_libraries(${example_program} PUBLIC ompt_tt OpenMP::OpenMP_CXX)
    endif()
    add_test ("test_${example_program}" ${example_program})
    set_tests_properties("test_${example_program}" PROPERTIES FAIL_REGULAR_EXPRESSION "[^a-z]Error;ERROR;Failed;Mismatched")
    #add_tests_properties("test_${example_program}" PROPERTIES ENVIRONMENT "OMP_TARGET_OFFLOAD=MANDATORY")
endforeach()

add_custom_target(tests)
#add_custom_command(TARGET tests POST_BUILD COMMAND ctest -R test --output-on-failure --timeout 100)
add_custom_command(TARGET tests POST_BUILD COMMAND ctest -R test --timeout 100)

function(dump_cmake_variables)
    get_cmake_property(_variableNames VARIABLES)
    list (SORT _variableNames)
    foreach (_variableName ${_variableNames})
        if (ARGV0)
            unset(MATCHED)
            string(REGEX MATCH ${ARGV0} MATCHED ${_variableName})
            if (NOT MATCHED)
                continue()
            endif()
        endif()
        message(STATUS "${_variableName} = ${${_variableName}}")
    endforeach()
endfunction()

message(STATUS "----------------------------------------------------------------------")
message(STATUS "Variable Report:")
message(STATUS "----------------------------------------------------------------------")
#dump_cmake_variables("^CMAKE")
MESSAGE(STATUS "Build type: " ${CMAKE_BUILD_TYPE})
MESSAGE(STATUS "Libraries: " ${LIBS})
MESSAGE(STATUS "Compiler cxx debug flags:" ${CMAKE_CXX_FLAGS_DEBUG})
MESSAGE(STATUS "Compiler cxx release flags:" ${CMAKE_CXX_FLAGS_RELEASE})
MESSAGE(STATUS "Compiler cxx min size flags:" ${CMAKE_CXX_FLAGS_MINSIZEREL})
MESSAGE(STATUS "Compiler cxx flags:" ${CMAKE_CXX_FLAGS})
MESSAGE(STATUS "Install Prefix:" ${CMAKE_INSTALL_PREFIX})
message(STATUS "----------------------------------------------------------------------")

